# Default values for gen3kubernetes.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
#global tag for lables, etc
ENV: gen3dev
database:
  servername: "postgres-k8sgen3rmo.postgres.database.azure.com"
  username: "fence_gen3dev_user"
  port: "5432"
  databasename: "fence_db"
fence:
  defaultIDPProvider: google
  enabledIDPProviders:
    - name: "google"
      loginButtonText: "Google Login"
    - name: "microsoft"
      loginButtonText: "Microsoft Login"
    - name: "okta"
      loginButtonText: "Okta Login"
#    - fence
  replicas: 1
  image: "quay.io/cdis/fence:2020.05"
  base_url: 'https://gen3k8sdev.optum.com/user'
  resources:
    limits:
      cpu: '500m'
      memory: '256Mi'
    requests:
      cpu: '200m'
      memory: '128Mi'
  googleOauth:
    client_id: '459263570125-3hl550dfsjej6v16m7go20i7ovkol8pn.apps.googleusercontent.com'
    client_secret: 'qxRkPreusEWF60lhM4-tH7O7'
  microsoftOauth:
    client_id: '9db77a3b-3f63-4093-a9e8-96a9d6cc711b'
    client_secret: 'a-7H-z1041Ki7T5_v6jtGi5vtRCTq-_D.I'
  oktaOauth:
    client_id: ""
#    discovery_url: 'https://advisory-members.oktapreview.com/oauth2/aus9g5e1nqvNOzPgX0h7/.well-known/openid-configuration'
#    client_id: '0oaulq16pgTn1kPGy0h7'
#    client_secret: 'ucBxkvlljSBAIfBpnMY8q6jZ9sc625yYU15ZY2XL'
  defaultLoginURLSuffix: 'login/microsoft'
  amazonStorageCreds:
    - name: 'CREDS1'
      accesskeyid: 'stgaccvprh'
      secretkey: 'V6c8rNTDPxAozgf3M6ewHd+7A9XnTw8MNSfsQ63QLY1+nzloas6rSp0GsZuOK+Q+oT7gi5Cpdj8TEvqaC5xvOQ=='
    - name: 'CREDS2'
      accesskeyid: 'AKIAU2FCYYEUXZPLWKZF'
      secretkey: '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'
  amazonBuckets:
    - name: 'bucket1'
      credentialname: 'CREDS1'
      endpoint_url: 'https://minio-app-service-bfncrxya.azurewebsites.net'
      region: 'us-east-1'
    - name: 'gen3bucket88997'
      credentialname: 'CREDS'
      region: 'us-east-1'
  azCredentials:
    - name: 'CREDA'
      az_stgacctname: 'stgaccvprh'
      az_secret_access_key: 'V6c8rNTDPxAozgf3M6ewHd+7A9XnTw8MNSfsQ63QLY1+nzloas6rSp0GsZuOK+Q+oT7gi5Cpdj8TEvqaC5xvOQ=='
    - name: 'CREDB'
      az_stgacctname:  'azgen3blobstorage'
      az_secret_access_key: '0yzBB7W6H7Tz1wtmGHukXUuVA91YiYGn5anpPFgq4NoeccZ1rcqMgyaRCYwSYoZpUqMT0YJx1dWXTDjUQMltZQ=='
  azureBlobstores:
    - name: 'container1'
      credentialname: 'CREDA'
    - name: 'azgen3blobstorage'
      credentialname: 'CREDB'

  dataUploadBucket: 'azgen3blobstorage'
  adminUsers:
    - "randyolinger@gmail.com"
    - "rjwswenson@gmail.com"
    - "carlos.andrew.garcia@gmail.com"
    - "optumogs@gmail.com"
  regularUsers:
    - "randy.olinger@optum.com"
    - "carlos.garcia@optum.com"
  service:
    type: ClusterIP
    httpPort: 80
    httpsPort: 443
arborist:
  replicas: 1
  image: "quay.io/cdis/arborist:2020.05"
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 200m
      memory: 128Mi
  service:
    type: ClusterIP
    port: 80

image:
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "gen3dev"

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

revproxy:
  tls:
    crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUYzRENDQThTZ0F3SUJBZ0lKQU0zSEhlV1pqTU9KTUEwR0NTcUdTSWIzRFFFQkN3VUFNSGd4Q3pBSkJnTlYKQkFZVEFsVlRNUkl3RUFZRFZRUUlEQWxOYVc1dVpYTnZkR0V4RlRBVEJnTlZCQWNNREVWa1pXNGdVSEpoYVhKcApaVEVPTUF3R0ExVUVDZ3dGVDNCMGRXMHhFVEFQQmdOVkJBc01DRVZEVkNCVVpXTm9NUnN3R1FZRFZRUUREQkpQCmJHbHVaMlZ5VTJsbmJtbHVaME5sY25Rd0hoY05NakF3T1RFMU1UWXpOVE00V2hjTk1qSXdPVEUxTVRZek5UTTQKV2pBV01SUXdFZ1lEVlFRRERBdG9aWGwzYjI5a0xtTnZiVENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUApBRENDQWdvQ2dnSUJBT0ozVVc1T1NJaTc1WFNRaWpLdk5jelJReXJmc0tMTUZRbVlWbFFCR1FwcU1oYXprRndhCmpSM3pmdWZhUHY5b25MYlQ0S3h2bm9pb1pxRUYyWm9sWk5Ub3lscm5JY05LclREck1zTGFnN0htS2xpaUlrL1AKeHp5K1pteWxQOW5ITE5MUENOcWVxNzZmaE81NE9BM0xmdUlzd1owMVFrN3pEZTBBdDVjMDJqSnQ0RlM0N0liVAprMlgxSUtRQUlvNXhBMVdYY3JZWEg2VVFrSlN4anR1QWFMTUt3N1hsWjdSZjlhU1RGUmFPeUFpaU1TRFdmbjcvCmp2SFlrVGUzY0huSVRPdjZsN3NpRW56MEUvSnpaWmxGRkpWZ1FqQmdnSEFScDNnRlJuYmxLenZoSmRuU3B0MzcKNW96UEhvaUpkVlZBYjdLRmViK1pSMWw4SGhHcCtobDNTUU9kbVBORzZWZU9MVXBDS09hOEQrT25HS2sxMWpXNQpOdFlDTlI1NWl0OHVoMHV0UTlqMGpDOENPeXNkQnU3N3U3WXNLSVdBc3haMkJqSGVMRUNBaTk3WHNyVzk5NG96Cm1PNWFiLzB2MkF2MktjOGdBNW85cFZTS25kN0NKaHhBdWN1blJ6UTczZS9Vd0NuZ09WRjk0bHViTUVaYm5hdzEKSVFvcGQ1eG1IdFZYYkc1RStoM2hlcHlHRE9ObVN6L0RsZHkwTzdCYkh6aU9wM1BjTFhkZ0JPckVaV2hYb0x6ZApZVkVpRS83aW9SbEVjWUxPZnBOUVJYWVcrUyt1MWNnTWQrQzFMOTVLS29NY2lUdk9ZN0wrSTRaTlAyT2duWUFqClVrM1ZWb3FPOVhHU3JxZlVOYmdoWUtlRG9XcDFZcmZQKys2anhvTVlxNmU3ZCtKVHNHZ3BYWVh4QWdNQkFBR2oKZ2Nvd2djY3dnWlFHQTFVZEl3U0JqRENCaWFGOHBIb3dlREVMTUFrR0ExVUVCaE1DVlZNeEVqQVFCZ05WQkFnTQpDVTFwYm01bGMyOTBZVEVWTUJNR0ExVUVCd3dNUldSbGJpQlFjbUZwY21sbE1RNHdEQVlEVlFRS0RBVlBjSFIxCmJURVJNQThHQTFVRUN3d0lSVU5VSUZSbFkyZ3hHekFaQmdOVkJBTU1FazlzYVc1blpYSlRhV2R1YVc1blEyVnkKZElJSkFMR2kwWlJJSVZOb01Ba0dBMVVkRXdRQ01BQXdDd1lEVlIwUEJBUURBZ1R3TUJZR0ExVWRFUVFQTUEyQwpDMmhsZVhkdmIyUXVZMjl0TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFCek5FRHFVYUhVOHdoNlNZaXlOY2pLCmhqaDVRRFpqR1dJeXhKSU83ekNxQUptMWRCakRsWldwNjY5ZTlveUhxOXJXRjFrVzZKalFLc2FBNngxN3VONXIKVW5YZDJFKzFTNmhKWXF0ZzA3NDE1M3FEUnMzZGkwb2pFZ3FJQ3JQbEpFbWRYZkVRR0hqYStzK0lwbkc2dFNTaAo5QnFKc2ZGWTcyaHFNOFhRWHdVR0tYODk2NFZFNjloaUlTQkFjbDdGYnY1TWx2SFZ4bHdyT0RFbktRWDJlWExTCmRQNmFOc295cGRyY1c3TUp3dXF2alVhV2o2eHlhSCtUaWp3ZWtMa09hNEsyTXZxUlk3WnEvdnBocWpXNFJFUUIKSS9hdm9oMDAyWFlpdnhVaFJBVmQyY2ozMlJXUnRHMjFZWmlONklMbnVaK3pBQk1sNVRGZzNBZWdzZmU3KzF5Ngp2bVo5RkF1WHZKZlAxUkt1bmNxN0V4dnBUTW5rMm81MkxkRmtKTy82dDdISXV6bEFOZG0rYWNhbFNKVzY5Wlp5Cjd1QVprY203RjcwaEhjcWtLUmhaZ1pTV0lnVDk4L2pYZkRTNlV3elU1ZGZJSHhnMCtYeFhvVnFpNFRPTjl2N2EKYTMyUlFHdEN5bDR4R0lOQUVqNEVjd3dtYitCeEY0WkZBaWFYOExjSXFtOWZKVXlRamJtbEtzU0NMSmRxNXBBVAp4SW5HNEMyRHJ2MFFNSEhkNEs5Q29mQk4xU0RPMFV3VThPUnVHdnRaWDc3N2lYSHRXRHFnT2lMVC9sZGdDUkd4CjlWUERGZ1V1OE05aUFNZjIwek4zUncyYUtMaWpQR2JGRXJoSTR6bWdnVDV6cnVQK3RPVmE3clVsSE91Zy95TTgKMGVrUnhVVUpDTjJlZmkrQXNSWHdYdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
    key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBNG5kUmJrNUlpTHZsZEpDS01xODF6TkZES3Qrd29zd1ZDWmhXVkFFWkNtb3lGck9RClhCcU5IZk4rNTlvKy8yaWN0dFBnckcrZWlLaG1vUVhabWlWazFPaktXdWNodzBxdE1Pc3l3dHFEc2VZcVdLSWkKVDgvSFBMNW1iS1UvMmNjczBzOEkycDZydnArRTduZzREY3QrNGl6Qm5UVkNUdk1ON1FDM2x6VGFNbTNnVkxqcwpodE9UWmZVZ3BBQWlqbkVEVlpkeXRoY2ZwUkNRbExHTzI0Qm9zd3JEdGVWbnRGLzFwSk1WRm83SUNLSXhJTlorCmZ2K084ZGlSTjdkd2VjaE02L3FYdXlJU2ZQUVQ4bk5sbVVVVWxXQkNNR0NBY0JHbmVBVkdkdVVyTytFbDJkS20KM2Z2bWpNOGVpSWwxVlVCdnNvVjV2NWxIV1h3ZUVhbjZHWGRKQTUyWTgwYnBWNDR0U2tJbzVyd1A0NmNZcVRYVwpOYmsyMWdJMUhubUszeTZIUzYxRDJQU01Md0k3S3gwRzd2dTd0aXdvaFlDekZuWUdNZDRzUUlDTDN0ZXl0YjMzCmlqT1k3bHB2L1MvWUMvWXB6eUFEbWoybFZJcWQzc0ltSEVDNXk2ZEhORHZkNzlUQUtlQTVVWDNpVzVzd1JsdWQKckRVaENpbDNuR1llMVZkc2JrVDZIZUY2bklZTTQyWkxQOE9WM0xRN3NGc2ZPSTZuYzl3dGQyQUU2c1JsYUZlZwp2TjFoVVNJVC91S2hHVVJ4Z3M1K2sxQkZkaGI1TDY3VnlBeDM0TFV2M2tvcWd4eUpPODVqc3Y0amhrMC9ZNkNkCmdDTlNUZFZXaW83MWNaS3VwOVExdUNGZ3A0T2hhblZpdDgvNzdxUEdneGlycDd0MzRsT3dhQ2xkaGZFQ0F3RUEKQVFLQ0FnQSt2Z244Z29uTUFDcXhJYjU0RGx6Y2N2bWw3alYwMVEvYkNhNlpOWGluandaemphb29LbDhBZGs2cAprNml5Z0Z3eXR2N2ZKMG1IMlFnZUFvM29EQVlraXA1Tmt3MmltcFRqSWJaOWo2YSs2ZUsvamFQdDhzWGpTV2o5CkhzZFM0Y0RFWXdHeitCUGpDelQ4RUtpUEFkc1VkSXZycnk3QXlzd0g1cFAydTNqY1VkNjkra0hsbE1hWWo5Sk0KUFpGVlgzQXFEWHlGZ0dDUERjalF1V1MzNFpxZ1NCSXkyZXppWjFlYUVmbmN0eEFxZkMwYVNQTGc0cExLNUZKUApXbTQ1LzBsNGM0UUlINGQ1d1BHcDBWakxudnoxNmFaTTJ0K2FyUGwxNGhoRXBuZFU3cXJhNzJhMXg2MTNRNGJWCkV5aER4MGRxOFZucXdGK3BKaDc2aTlvenBmMi9Fa1ZXbHpsak5qUWd3S2xTaUNDeTYzcU5TZFJHWXpxaFJPMUIKcEJEY2FtQVBxelN1cGpIWjNUMXljWGZuWSsrT1I4WTVnaHpKTWxwemk5RzVkRUVpZ2U4WG85N0lTUC9yT1ErUgp2Rkg1a1RWR3FValRHYmFIRUdXOWlQZmRZNERrVDMxQVQySjlON09PdkV6MStlV2YxNGk3c1dIaG4zOU9pbkFDCmZscFkvTncxamJCNTdaL1dvQnh1eHVXbXdXREdaMmV4RFI1WWFKT3RtUWFkQjVEQllCV0o5dHJkVkJDaUhSdXAKeEtYSk9tS0o2Ylk2ZmZrTG93MmFSM2oyWHVyTldOT3Z0VTRWQTdIdncvaExDNTdYaFR4Z3R2NEpNM0JJTVNNUwpzNEhONTBrMmtJME9HRmdabEY1Z0VoeENCZnRNeUVUUDdNTktLbEdVWnFXSys0L3paUUtDQVFFQThzOWhmWTBLCnZCYWtQS0NReEhDcGozZFJURFR5a2E3WkJkY3A4SkdXTS8vanNscVlUMk5Hbjdic2E3QXZFaXUvUy9yUS9EUEcKL2o0OUhoSHliOERSdE5hQ1BBR1luZk5zYkRrNURlc2ZsUEo5T1hnT3d4M3MvZ242Q0hZTU5vWklmYy94M0JGWQpTbWhvMks3ZU9aTklhVlp5bHZndWdqQTZrczBLVFF1Y0I1ajlacndibENRdUlFVkRHem9lbzRmaGIrUHl1OSsvCndsOWoyZk5nSzVDNElldWpuNEtGbWNEdWp0eUV0T3RwQ0tubGtNbDZ4eENpNjY3WC9Cdjk0TVJmcWY2Q3dPNFUKYkhNTWJuazVUaXZvaGpuM2hLKyt5M2dvcUNTM3VMUlRLMzhkeGk0dzVnck5NTzdMcitjbUJUckYyajkrc2Q4VQpPWXdPdElPSzVHUitTd0tDQVFFQTdzU21tbXlweE1Za2QzUVNqV3hYa2tKQzZkajZ2MmgwamJ5bTN6S2JGdHlYCjIzNDZLVWJhalZ3YjJzekRLRTRFNWxqTmRGSkNUQmVzc3c2Z2ZYWTd6YituL3dQYmdob2lJL292UHZ6MHJuOEwKYkxUb0ZzZ3hsQW41d0YxNmRLeTlnMnpiV3kxdVljdnBXdlRNQmduRVN3bkM3cGtEV3NBNWIyZit1ajd0UGxOMAp5Z1lESGxIbTRGZjlhZ0k3UEpIbHFoVGdLdnJmSWFNWlVZRUY3a2owekRKUUVoTFphNnM5TEdUZzZsWHhNMDh6CjFPQ2xRZmdwVE0wSnN6Yy9QUXB6VFZ3dSs0cW1oaVJnWW8wNUErNEtlMFJ5VmZOZE1JWEVOY3FhOUJUTWprREkKNWdITGV3aHk5SEhtQWhBQkpQd3lPY2IzK05ZSnJjWUFtRjI1TTdyM013S0NBUUVBdzlJSU4rOGx0eWN6Y1VtMQpOeGY5UjV6Y3plN3RxaHd2SG95MllET3B4V29id2wxWjlMeUYyb3oyQXF0bWF1c3BMaWVybjVwS1pBVGgyWHh6CjN6ak1aMkdRU3NDbXlzdmtweXRISGpoL2tlbzJuOEI1ZDFhTktSdjJzQmcwSlUwSzdaeGszQ3lJM2dseWRUNGkKTHFEZmgwU1d5YmFDRzdDMXJHcjhZY0o1Slk5MjNnSGE1QkNCdXJqaE0vWWRlNWs4Y0xhUHJvRDI3OVZxZS8zUgprNUQxVHpYeEVkVjcxZEpKRXFJNXpJY0dnRncwcmg0dmpKZVlMU2NuUFVWOTdHV3pHVEFQVjNVcXQ0UFpoTWJ6Ck5sNG0rd21JMjFPNU5mTkVKc2JsL0dwQm9SUzFlSDBNSnBxVGZXRTRtRFo4N1Q3SERncWpMT1JTTlU4RkZRUDUKWWRUQ0hRS0NBUUVBbmU5cUhIK0FGRzdVTkVlTTlnc1NLZWEyaUNSRVNGUDV0TDl5eWZTWmJaZmd3d2xOdzN2ZwptTnl5ZUJvMWhQV0dmQytGUjBvYUhHY1VqeVEvdUgxNnRXL3UyZHBkV2tPYkRaMHhuMEtIUHQwK1cxdVdvV3N1CmtEUEJCaU5QR3RvZ1NVeTZGQ2VLK2hsOWMvSzArZEdBQy9xYS9HUXVPZHNvb3E1eGFoU3hyU1phL0Q3WjFUWnIKdHoyOG5HQjVlbWt2TnorenYvcE5tZHhlcFBEcFVXTGt1aVVWbmI3bUhqZ1lzTUxSbTIvWnFnemJ4aFlLZWdhQwpteENOT0FSMVNoVWRpN0JNUzRxODk4SWNGMVErd0lDMllpODJTZkErVmhoRlh5ZHpNN3lHU2hwRVNSQXEzbWtLClVQTCtKNk1hZnJKckxwaVQ4Zjd5VEFYSzR2NHJ3VElNelFLQ0FRQlBQdGVaUEJHdjlmWU5QNWdZNUU0enF4THoKYVdxTWlDRWdjYk55TnRyQ09sVGp1RnIySUxnUDFCaXBjTUo0SEMwcERrS2FHWHdZbEs3MGs1a0t2Mk9TQVJLNQpuWCt1cGx6UnREZTBqT3FlZ0JDc3daOVhoR2s0ck4wUGxyRk1WRGxhZ09vWXR5SjNXL2t2ZEo4ME5Ia1pYa1BvClMvYi9RNDlGbWdOVDJZbmtSOGZMNTZtVVJ0a2hnakVhSG5xaHNjWHpoQW5iMXFtYUVNdk4zN2hJZFNCUk0vWDgKT1VyZUFrUHkraVRhZ0l6M2xYWDRnUGp2cEhabjZwVHlyUmlwRTN1NEp2Y04rUG1ocndSeDZ3Mlg4NDNOK0RvSgpYTFBPcG8yREQ3dVBQSytiZSszUTZSQWJqMndqeURsaXBrQ1I0N054ZVdGdTIxcHE0NWNGUzU1VTkwaWYKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
    cacrt:  "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZiRENDQTFRQ0NRQ3hvdEdVU0NGVGFEQU5CZ2txaGtpRzl3MEJBUXNGQURCNE1Rc3dDUVlEVlFRR0V3SlYKVXpFU01CQUdBMVVFQ0F3SlRXbHVibVZ6YjNSaE1SVXdFd1lEVlFRSERBeEZaR1Z1SUZCeVlXbHlhV1V4RGpBTQpCZ05WQkFvTUJVOXdkSFZ0TVJFd0R3WURWUVFMREFoRlExUWdWR1ZqYURFYk1Ca0dBMVVFQXd3U1QyeHBibWRsCmNsTnBaMjVwYm1kRFpYSjBNQjRYRFRJd01EVXdOekl6TURNMU5sb1hEVFEzTURreU16SXpNRE0xTmxvd2VERUwKTUFrR0ExVUVCaE1DVlZNeEVqQVFCZ05WQkFnTUNVMXBibTVsYzI5MFlURVZNQk1HQTFVRUJ3d01SV1JsYmlCUQpjbUZwY21sbE1RNHdEQVlEVlFRS0RBVlBjSFIxYlRFUk1BOEdBMVVFQ3d3SVJVTlVJRlJsWTJneEd6QVpCZ05WCkJBTU1FazlzYVc1blpYSlRhV2R1YVc1blEyVnlkRENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0MKQWdvQ2dnSUJBTGRaVG9hbE9PeFdaVDQ0cTIzc09ndS9zM0dqU3JaaVJEbkxIcmo0aEVhU1UvSGNXdTBtcU1yeAo0VVlKNWpNUlEzRjQ2ck1kQ3BvZHE0T0twbGxIVGM5TUg0cTgveld4NW82dnBZZXh4OWVLZ1RwbFVqeS9seGF3CnZ0WHNHK1Q2VFhWYUFQSGtUbEg0OGJVSE5UVm9XLy81K0JML242d2wyNERnUzgyblRrNGgyZGNLcjFzODV3K0EKTCtub3BmK3BKenNzQTdHdWF3VHJIZ1Z5YnZWWllnVXBmYzdvVzE2Z0xnTVhFWHFyV1doQmRMVCtZdGxYSElDZwpUbXNVSU5RY2ExSmI2K1BqUnBYYm9MRWMxOE5FbTBIR0hrVkk4ZnhUajJObi9RbThoaWhxNnN5eStrT2dld2NrCmxvK0llWGJiZk54SXJSWlhWYkdXTEZkMExxSitVV2RqZ0lEdWw1SFdzSHVEc2hJYmtGYkRJUHJURExwMTNEbGwKNy9ISkNCa21EVXJxTnFwMElkY2FLM1RET2VlT3Jab0ZhTCtPOE5mS3lUNEdNd3Q0TWhCb084bVUxZ0EyWnhsUwoxT0NRcTVpTGMxSVcyNTVvSlJMZ0wrL1ZIQnJObzlOSnNkbFl0WjNMRnd1c2w1MnBHNlpPWW9TQlV4S0svTnJyCmlOZFNid0ZVeTJZOUFUVkRLT0cwT0xPK3NiejlBZ3BqS0lVOVVpNEtDbHdXTDFXVmcrTWpWM1U1dmMwVGExYTcKWXFnVDlvRmdrelFXZDdQYmpqVDBOWW1Wams0bHpJbnQzTTFoQVJUbnZ4Q2JOTy9zL3hOVnZHQmNrZXBzWUJDawpoSk5nZW1MOWFMeWVib0sxTjkrdmJPNUdhSXl3NWE0NWtMbDVoTVBJVTF1K1BldVkvQ2VaQWdNQkFBRXdEUVlKCktvWklodmNOQVFFTEJRQURnZ0lCQUNUVHczcGNDQ1RMMkZVQi9aOUJIVWJIUThmS1FhWWtQZ0hzbTZMMk9uMDUKRXNwQ3dteGlHVGhVMGZKQmtBdFg3VitpajZMQmN6QjNDRkdDMmEwMFRCNXFQZVdxK09OZGlVMVBpZEhXU2xvQgo5cjIwQVdQbjhQTE9hdmFhek8rS0Fwa3lneFNYaWUwYm5nbXFRZWc0R3BjTllGTW9qZUw4SDBMNmEvbURmdnpKCkx4d2hlb2hHUDRrbVhwT08zT1dYZ09mdW9qYTBEV1EwWG9zY0dNdjdLSEdyNkJjNWlidUVkNlZ0V01tOXRITnMKRjlJNDRRSzRSZlphUEpkaWlhS0l3V2p1a0EyeUM4amtDTzdDNDdFKzJuSmFWQ2s4cUtaSHlKbzFzdW90RVhkWAozcHNDZkJpVTI2a0l1YVpQK2EreEoxT210SGIrR2RkZ0ZUSzNOTnV5cDA5MjN6aVY1Qm5WdDROWFV2QXM5V1NzCnBzVWliNU5USWwrZnpPV3plNWlEYlpEUmluNDJMYXEwOFRaR3YvVXBLUWY0YmNtU2RHY2pQeDEzOFZteW5aa1gKSUY0SWRPVjlXbXJ3cVFKdVBOTW1BdTRxcXF5RnRKTUlSOFcvcTg3UHlNY0h1TGdnWmhxb0tpQVVZbndmSStkNApiR3luUjZyek9MTEx1MmFsWmYzSGVqUEIyM3BVQk9Cai9DNm4zT0w4bFJNemRkV09uRzV0ZFMzV2pzNnQvZ2Z4ClBQWERDRU1RbWg2T00wNVIrZmQvejJsSTdMM1I0VFpURWtlY2ZQSksveHhSNFZscnZ6eitPYjdCQUNYSzBpWWIKeitpVzQ3R2kxYzRYTE9DZFY5d1gxaG8wd0ZMYjhLNHJEL0xUTmExbHJuenhVMzZhQVl5WnR2VE1uaHFydnp2cQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
