apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "gen3kubernetes.labels" . | nindent 4 }}
    component: sheepdog-configmap
  name: sheepdog-config-configmap-{{ .Values.ENV }}
data:
  sheepdog_setup.sh: |
    #!/bin/bash
    # entrypoint script for sheepdog to setup db

    #move the setup files to proper destination..
    echo "Moving the setup files"
    for i in wsgi.py creds.json config_helper.py
      do cp setup/$i ./$i
    done


    echo "setting up schemas dir"
    if [ -f setup/sheepdog_shemas.tar.gz.base64 ] ;
      then
        curdir=$PWD
        mkdir /schemas_dir \
        && cd /schemas_dir \
        && base64 -d /var/www/sheepdog/setup/sheepdog_shemas.tar.gz.base64 | gunzip -c | tar xf -
        cd $curdir
      fi

    until (echo test | nc $PGHOST $PGPORT -w 2   && echo "Postgres port is open") >/dev/null 2>&1; do
      echo "Postgres is unavailable - sleeping"
      sleep 5
    done

    echo "postgres is ready"

    update-ca-certificates
    python /sheepdog/bin/setup_transactionlogs.py --host "$PGHOST" --user "$PGUSER" --password "$PGPASSWORD" --database "$PGDATABASE"

    /dockerrun.sh
  wsgi.py: |
    from sheepdog.api import app, app_init
    from os import environ
    import config_helper

    APP_NAME='sheepdog'
    def load_json(file_name):
      return config_helper.load_json(file_name, APP_NAME)

    conf_data = load_json('creds.json')
    config = app.config

    config["AUTH"] = 'https://auth.service.consul:5000/v3/'
    config["AUTH_ADMIN_CREDS"] = None
    config["INTERNAL_AUTH"] = None

    # SIGNPOST is deprecated, replaced by INDEX_CLIENT (peregrine>=1.3.0)
    config['SIGNPOST'] = {
        'host': 'http://service-indexd-{{ .Values.ENV }}',
        'version': 'v0',
        'auth': ('{{ .Values.indexd.username }}', '{{ .Values.indexd.password }}'),
    }
    config['INDEX_CLIENT'] = {
        'host': 'http://service-indexd-{{ .Values.ENV }}',
        'version': 'v0',
        'auth': ('{{ .Values.indexd.username }}', '{{ .Values.indexd.password }}'),
    }

    config["FAKE_AUTH"] = False
    config["PSQLGRAPH"] = {
        'host': '{{ .Values.sheepdog.database.servername }}' ,
        'user': '{{ .Values.sheepdog.database.username }}@{{ .Values.sheepdog.database.servername }}',
        'password': '{{ .Values.sheepdog.database.db_password }}',
        'database': '{{ .Values.sheepdog.database.databasename }}',
    }


    config['HMAC_ENCRYPTION_KEY'] = {{ .Values.peregrine.hmac_key | quote }}
    config['FLASK_SECRET_KEY'] = {{ .Values.peregrine.gdcapi_secret_key | quote }}
    config['PSQL_USER_DB_CONNECTION'] = 'postgresql://{{ .Values.fence.database.username }}:{{ .Values.fence.database.db_password }}@{{ .Values.fence.database.servername }}:{{ .Values.fence.database.port }}/{{ .Values.fence.database.databasename }}'

    config['OIDC_ISSUER'] = 'https://{{.Values.portal.externalhostname}}/user'

    config['OAUTH2'] = {  }
    config['USER_API'] = 'http://service-fence-{{ .Values.ENV }}/'
    # option to force authutils to prioritize USER_API setting over the issuer from
    # token when redirecting, used during local docker compose setup when the
    # services are on different containers but the hostname is still localhost
    config['FORCE_ISSUER'] = True

    if environ.get('DICTIONARY_URL'):
        config['DICTIONARY_URL'] = environ.get('DICTIONARY_URL')
    else:
        config['PATH_TO_SCHEMA_DIR'] = environ.get('PATH_TO_SCHEMA_DIR')

    app_init(app)
    application = app
    application.debug = (environ.get('GEN3_DEBUG') == "True")
  creds.json: |
    {
      "fence_host":     {{ .Values.fence.database.servername | quote }},
      "fence_username": "{{ .Values.fence.database.username }}@{{ .Values.fence.database.servername }}",
      "fence_password": {{ .Values.fence.database.db_password | quote }},
      "fence_database": {{ .Values.fence.database.databasename | quote }},
      "db_host": {{ .Values.sheepdog.database.servername | quote }},
      "db_username": "{{ .Values.sheepdog.database.username }}@{{ .Values.sheepdog.database.servername}}",
      "db_password": {{ .Values.sheepdog.database.db_password | quote }},
      "db_database": {{ .Values.sheepdog.database.databasename | quote }},
      "hostname": {{ .Values.portal.externalhostname | quote }}
    }
  config_helper.py: |
{{ .Files.Get  .Values.config_helper  | indent 4}}
  sheepdog_shemas.tar.gz.base64: |
{{ .Files.Get  .Values.sheepdog.schemas  | indent 4}}
