apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "gen3kubernetes.labels" . | nindent 4 }}
    component: peregrine-configmap
  name: peregrine-config-configmap-{{ .Values.ENV }}
data:
  peregrine_setup.sh: |
    #!/bin/bash
    # entrypoint script for peregrine to setup db

    sleep 2
    until (echo test | nc $PGHOST $PGPORT -w 2   && echo "Postgres port is open") >/dev/null 2>&1; do
      echo "Postgres is unavailable - sleeping"
    done

    echo "postgres is ready"

    update-ca-certificates
    /dockerrun.sh
  wsgi.py: |
    from peregrine.api import app, app_init
    from os import environ
    import config_helper

    APP_NAME='peregrine'
    def load_json(file_name):
      return config_helper.load_json(file_name, APP_NAME)

    conf_data = load_json('creds.json')
    config = app.config

    config["AUTH"] = 'https://auth.service.consul:5000/v3/'
    config["AUTH_ADMIN_CREDS"] = None
    config["INTERNAL_AUTH"] = None

    # SIGNPOST is deprecated, replaced by INDEX_CLIENT (peregrine>=1.3.0)
    config['SIGNPOST'] = {
        'host': 'http://service-indexd-{{ .Values.ENV }}',
        'version': 'v0',
        'auth': ('{{ .Values.indexd.username }}', '{{ .Values.indexd.password }}'),
    }
    config['INDEX_CLIENT'] = {
        'host': 'http://service-indexd-{{ .Values.ENV }}',
        'version': 'v0',
        'auth': ('{{ .Values.indexd.username }}', '{{ .Values.indexd.password }}'),
    }

    config["FAKE_AUTH"] = False
    config["PSQLGRAPH"] = {
        'host': '{{ .Values.indexd.database.servername }}' ),
        'user': '{{ .Values.indexd.database.username }}',
        'password': '{{ .Values.indexd.database.db_password }}',
        'database': '{{ .Values.indexd.database.databasename }}',
    }

    config['HMAC_ENCRYPTION_KEY'] = {{ .Values.peregrine.hmac_key | quote }}
    config['FLASK_SECRET_KEY'] = {{ .Values.peregrine.gdcapi_secret_key | quote }}
    config['PSQL_USER_DB_CONNECTION'] = 'postgresql://{{ .Values.fence.database.username }}:{{ .Values.fence.database.db_password }}@{{ .Values.fence.database.servername }}:{{ .Values.fence.database.port }}/{{ .Values.fence.database.databasename }}'

    if environ.get('DICTIONARY_URL'):
        config['DICTIONARY_URL'] = environ.get('DICTIONARY_URL')
    else:
        config['PATH_TO_SCHEMA_DIR'] = environ.get('PATH_TO_SCHEMA_DIR')

    config['SUBMISSION'] = {
        'bucket': {{ .Values.peregrine.bagitbucket | quote }} )
    }

     config['STORAGE'] = {
         "s3":
         {
             "access_key": {{ .Values.peregrine.s3access | quote  }} ,
             'secret_key': {{ .Values.peregrine.s3secret | quote  }}
         }
    }

    config['OIDC_ISSUER'] = 'https://{{.Values.portal.externalhostname}}/user'

    config['OAUTH2'] = {
        # 'client_id': conf_data.get('oauth2_client_id', '{{oauth2_client_id}}'),
        # 'client_secret': conf_data.get('oauth2_client_secret', '{{oauth2_client_secret}}'),
        # 'api_base_url': 'https://%s/user/' % conf_data['hostname'],
        # 'authorize_url': 'https://%s/user/oauth2/authorize' % conf_data['hostname'],
        # 'access_token_url': 'https://%s/user/oauth2/token' % conf_data['hostname'],
        # 'refresh_token_url': 'https://%s/user/oauth2/token' % conf_data['hostname'],
        # 'client_kwargs': {
        #     'redirect_uri': 'https://%s/api/v0/oauth2/authorize' % conf_data['hostname'],
        #     'scope': 'openid data user',
        # },
        # # deprecated key values, should be removed after all commons use new oidc
        # 'internal_oauth_provider': 'http://fence-service/oauth2/',
        # 'oauth_provider': 'https://%s/user/oauth2/' % conf_data['hostname'],
        # 'redirect_uri': 'https://%s/api/v0/oauth2/authorize'  % conf_data['hostname']
    }

    config['USER_API'] = 'http://service-fence-{{ .Values.ENV }}/'
    # option to force authutils to prioritize USER_API setting over the issuer from
    # token when redirecting, used during local docker compose setup when the
    # services are on different containers but the hostname is still localhost
    config['FORCE_ISSUER'] = True

    app_init(app)
    application = app
    application.debug = (environ.get('GEN3_DEBUG') == "True")
  creds.json: |
    {
      "fence_host":     '{{ .Values.fence.database.servername }}',
      "fence_username": '{{ .Values.fence.database.username }}',
      "fence_password": '{{ .Values.fence.database.db_password }}',
      "fence_database": '{{ .Values.fence.database.databasename }}',
      "db_host": '{{ .Values.peregrine.database.servername }}',
      "db_username": '{{ .Values.peregrine.database.username }}',
      "db_password": '{{ .Values.peregrine.database.db_password }}',
      "db_database":'{{ .Values.peregrine.database.databasename }}',
      "hostname": "{{.Values.portal.externalhostname}}"
    }
  config_helper.py: |
{{ .Files.Get  .Values.indexd.config_helper  | indent 4}}
